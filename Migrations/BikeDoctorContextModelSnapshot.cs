// <auto-generated />
using System;
using BikeDoctor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BikeDoctor.Migrations
{
    [DbContext(typeof(BikeDoctorContext))]
    partial class BikeDoctorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BikeDoctor.Models.Client", b =>
                {
                    b.Property<int>("CI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CI"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberPhone")
                        .HasColumnType("integer");

                    b.HasKey("CI");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BikeDoctor.Models.CostApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("ListLaborCosts")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("CostApprovals");
                });

            modelBuilder.Entity("BikeDoctor.Models.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean");

                    b.Property<bool>("SurveyCompleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("BikeDoctor.Models.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("ListDiagnostics")
                        .HasColumnType("jsonb");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("BikeDoctor.Models.FlowAttention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<Guid>("CostApprovalID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeliveryID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiagnosisID")
                        .HasColumnType("uuid");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QualityControlID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceptionID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RepairID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SparePartsID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CostApprovalID");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("DiagnosisID");

                    b.HasIndex("QualityControlID");

                    b.HasIndex("ReceptionID");

                    b.HasIndex("RepairID");

                    b.HasIndex("SparePartsID");

                    b.ToTable("FlowAttentions");
                });

            modelBuilder.Entity("BikeDoctor.Models.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("BikeDoctor.Models.QualityControl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("ListControls")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("QualityControls");
                });

            modelBuilder.Entity("BikeDoctor.Models.Reception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("Images")
                        .HasColumnType("text");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reasons")
                        .HasColumnType("text");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("BikeDoctor.Models.Repair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("ListReparations")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("BikeDoctor.Models.SpareParts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("ListSpareParts")
                        .HasColumnType("jsonb");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("BikeDoctor.Models.CostApproval", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId");

                    b.Navigation("Client");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("BikeDoctor.Models.Delivery", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId");

                    b.Navigation("Client");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("BikeDoctor.Models.FlowAttention", b =>
                {
                    b.HasOne("BikeDoctor.Models.CostApproval", null)
                        .WithMany()
                        .HasForeignKey("CostApprovalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Delivery", null)
                        .WithMany()
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Diagnosis", null)
                        .WithMany()
                        .HasForeignKey("DiagnosisID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.QualityControl", null)
                        .WithMany()
                        .HasForeignKey("QualityControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Reception", null)
                        .WithMany()
                        .HasForeignKey("ReceptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Repair", null)
                        .WithMany()
                        .HasForeignKey("RepairID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.SpareParts", null)
                        .WithMany()
                        .HasForeignKey("SparePartsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeDoctor.Models.Motorcycle", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany("Motorcycles")
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BikeDoctor.Models.QualityControl", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId");

                    b.Navigation("Client");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("BikeDoctor.Models.Repair", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId");

                    b.Navigation("Client");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("BikeDoctor.Models.Client", b =>
                {
                    b.Navigation("Motorcycles");
                });
#pragma warning restore 612, 618
        }
    }
}
