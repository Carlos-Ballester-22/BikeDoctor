// <auto-generated />
using System;
using BikeDoctor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BikeDoctor.Migrations
{
    [DbContext(typeof(BikeDoctorContext))]
    partial class BikeDoctorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BikeDoctor.Models.Client", b =>
                {
                    b.Property<int>("CI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CI"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberPhone")
                        .HasColumnType("integer");

                    b.HasKey("CI");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BikeDoctor.Models.CostApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("CostApprovals");
                });

            modelBuilder.Entity("BikeDoctor.Models.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SurveyCompleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("BikeDoctor.Models.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("BikeDoctor.Models.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("BikeDoctor.Models.QualityControl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("QualityControls");
                });

            modelBuilder.Entity("BikeDoctor.Models.Reception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CliendCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("Images")
                        .HasColumnType("text");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reasons")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CliendCI");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("BikeDoctor.Models.Repair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientCI");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("BikeDoctor.Models.SpareParts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CliendCI")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeCI")
                        .HasColumnType("integer");

                    b.Property<string>("MotorcycleLicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CliendCI");

                    b.HasIndex("MotorcycleLicensePlate");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("BikeDoctor.Models.CostApproval", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId");

                    b.OwnsMany("BikeDoctor.Models.LaborCost", "ListLaborCosts", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("CostApprovalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DescriptionProduct")
                                .HasColumnType("text");

                            b1.Property<string>("NameProduct")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Price")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("CostApprovalId");

                            b1.ToTable("LaborCost");

                            b1.WithOwner()
                                .HasForeignKey("CostApprovalId");
                        });

                    b.Navigation("Client");

                    b.Navigation("ListLaborCosts");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("BikeDoctor.Models.Delivery", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId");

                    b.Navigation("Client");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("BikeDoctor.Models.Diagnosis", b =>
                {
                    b.OwnsMany("BikeDoctor.Models.Diagnostic", "ListDiagnostics", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DetailOfError")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("DiagnosisId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Error")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ServiceType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("TimeSpent")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("DiagnosisId");

                            b1.ToTable("Diagnostic");

                            b1.WithOwner()
                                .HasForeignKey("DiagnosisId");
                        });

                    b.Navigation("ListDiagnostics");
                });

            modelBuilder.Entity("BikeDoctor.Models.Motorcycle", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany("Motorcycles")
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BikeDoctor.Models.QualityControl", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId");

                    b.OwnsMany("BikeDoctor.Models.Control", "ListControls", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ControlName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("DetailsControl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("QualityControlId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("QualityControlId");

                            b1.ToTable("Control");

                            b1.WithOwner()
                                .HasForeignKey("QualityControlId");
                        });

                    b.Navigation("Client");

                    b.Navigation("ListControls");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("BikeDoctor.Models.Repair", b =>
                {
                    b.HasOne("BikeDoctor.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeDoctor.Models.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId");

                    b.OwnsMany("BikeDoctor.Models.Reparation", "ListReparations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DescriptionReparation")
                                .HasColumnType("text");

                            b1.Property<string>("NameReparation")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("RepairId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("RepairId");

                            b1.ToTable("Reparation");

                            b1.WithOwner()
                                .HasForeignKey("RepairId");
                        });

                    b.Navigation("Client");

                    b.Navigation("ListReparations");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("BikeDoctor.Models.SpareParts", b =>
                {
                    b.OwnsMany("BikeDoctor.Models.SparePart", "ListSpareParts", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DetailSparePart")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("NameSparePart")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Price")
                                .HasColumnType("integer");

                            b1.Property<Guid>("SparePartsId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("SparePartsId");

                            b1.ToTable("SparePart");

                            b1.WithOwner()
                                .HasForeignKey("SparePartsId");
                        });

                    b.Navigation("ListSpareParts");
                });

            modelBuilder.Entity("BikeDoctor.Models.Client", b =>
                {
                    b.Navigation("Motorcycles");
                });
#pragma warning restore 612, 618
        }
    }
}
